// ==UserScript==
// @name         Tracker
// @namespace    http://tampermonkey.net/
// @version      4.0
// @description  Compact case counter and timer for Paragon tool
// @author       joelcarb@amazon.com
// @match        https://paragon-na.amazon.com/hz/investigation*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function() {
    'use strict';

    let viewedCases = new Set(JSON.parse(GM_getValue('viewedCases', '[]')));
    let timerInterval;
    let currentCaseId = null;
    let timerState = JSON.parse(GM_getValue('timerState', '{"caseId": null, "startTime": null}'));

    function addStyles() {
        const styleSheet = document.createElement('style');
        styleSheet.textContent = `
            #miniCounter {
                position: fixed;
                top: 10px;
                left: 10px;
                z-index: 9999;
                background: #2C3E50;
                color: white;
                border-radius: 4px;
                font-family: Arial, sans-serif;
                font-size: 12px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                width: 130px;
                user-select: none;
            }
            #counterHeader {
                padding: 5px;
                background: rgba(0,0,0,0.2);
                cursor: move;
                border-radius: 4px 4px 0 0;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            #counterContent {
                padding: 5px;
            }
            .counter-row {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin: 3px 0;
            }
            .label {
                font-size: 11px;
                opacity: 0.8;
            }
            .value {
                font-weight: bold;
            }
            #toggleButton {
                background: none;
                border: none;
                color: white;
                cursor: pointer;
                padding: 0 2px;
            }
            #miniCounter.collapsed #counterContent {
                display: none;
            }
            #resetBtn {
                background: rgba(0,0,0,0.2);
                border: none;
                color: white;
                cursor: pointer;
                border-radius: 3px;
            }
            #resetBtn:hover {
                background: rgba(0,0,0,0.3);
            }
            #settingsButton {
                background: none;
                border: none;
                color: white;
                cursor: pointer;
                padding: 0 2px;
                font-size: 11px;
                margin-right: 5px;
            }
            #colorPicker {
                position: absolute;
                top: 100%;
                right: 0;
                background: #34495e;
                border-radius: 4px;
                padding: 5px;
                display: none;
                grid-template-columns: repeat(3, 1fr);
                gap: 5px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                z-index: 10000;
            }
            .color-option {
                width: 20px;
                height: 20px;
                border-radius: 3px;
                border: 2px solid transparent;
                cursor: pointer;
                transition: transform 0.2s;
            }
            .color-option:hover {
                transform: scale(1.1);
                border-color: white;
            }
            #searchStatus {
                font-size: 10px;
                color: rgba(255,255,255,0.7);
                text-align: center;
                margin: 3px 0;
                min-height: 12px;
            }
        `;
        document.head.appendChild(styleSheet);
    }
    function formatTime(seconds) {
        const hrs = Math.floor(seconds / 3600);
        const mins = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `${hrs}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    function adjustColor(color, amount) {
        const hex = color.replace('#', '');
        const r = Math.max(0, Math.min(255, parseInt(hex.substr(0, 2), 16) + amount));
        const g = Math.max(0, Math.min(255, parseInt(hex.substr(2, 2), 16) + amount));
        const b = Math.max(0, Math.min(255, parseInt(hex.substr(4, 2), 16) + amount));
        return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
    }

    function createCounter() {
        const counter = document.createElement('div');
        counter.id = 'miniCounter';
        counter.innerHTML = `
            <div id="counterHeader">
                <span>Case Tracker</span>
                <div style="display: flex; align-items: center;">
                    <button id="settingsButton">⚙️</button>
                    <button id="toggleButton">▼</button>
                </div>
            </div>
            <div id="colorPicker"></div>
            <div id="counterContent">
                <div class="counter-row">
                    <span class="label">Time:</span>
                    <span id="timerDisplay" class="value">0:00:00</span>
                </div>
                <div class="counter-row">
                    <span class="label">Cases:</span>
                    <span id="caseCount" class="value">${viewedCases.size}</span>
                </div>
                <div id="searchStatus"></div>
                <div class="counter-row">
                    <button id="resetBtn" style="width:100%; padding:2px; margin-top:3px;">Reset</button>
                </div>
            </div>
        `;

        document.body.appendChild(counter);
        makeDraggable();
        addEventListeners();
    }

    function initializeColorPicker() {
        const colors = [
            '#2C3E50', '#34495E', '#16A085',
            '#27AE60', '#2980B9', '#8E44AD',
            '#C0392B', '#D35400', '#E67E22'
        ];

        const colorPicker = document.getElementById('colorPicker');
        colors.forEach(color => {
            const colorOption = document.createElement('div');
            colorOption.className = 'color-option';
            colorOption.style.backgroundColor = color;
            colorOption.onclick = () => {
                const counter = document.getElementById('miniCounter');
                const header = document.getElementById('counterHeader');
                counter.style.background = color;
                header.style.background = adjustColor(color, -20);
                GM_setValue('counterColor', color);
                colorPicker.style.display = 'none';
            };
            colorPicker.appendChild(colorOption);
        });

        // Load saved color
        const savedColor = GM_getValue('counterColor', '#2C3E50');
        const counter = document.getElementById('miniCounter');
        const header = document.getElementById('counterHeader');
        counter.style.background = savedColor;
        header.style.background = adjustColor(savedColor, -20);

        // Toggle color picker
        document.getElementById('settingsButton').onclick = (e) => {
            e.stopPropagation();
            colorPicker.style.display = colorPicker.style.display === 'grid' ? 'none' : 'grid';
        };

        // Close color picker when clicking outside
        document.addEventListener('click', (e) => {
            if (!colorPicker.contains(e.target) && e.target.id !== 'settingsButton') {
                colorPicker.style.display = 'none';
            }
        });
    }
    function makeDraggable() {
        const counter = document.getElementById('miniCounter');
        const header = document.getElementById('counterHeader');
        let isDragging = false;
        let currentX;
        let currentY;
        let initialX;
        let initialY;

        // Load saved position
        const savedPosition = JSON.parse(GM_getValue('counterPosition', '{"left": "10px", "top": "10px"}'));
        counter.style.left = savedPosition.left;
        counter.style.top = savedPosition.top;

        header.onmousedown = dragStart;

        function dragStart(e) {
            if (e.target === header || header.contains(e.target)) {
                initialX = e.clientX - counter.offsetLeft;
                initialY = e.clientY - counter.offsetTop;
                isDragging = true;

                document.onmousemove = drag;
                document.onmouseup = dragEnd;
            }
        }

        function drag(e) {
            if (isDragging) {
                e.preventDefault();
                currentX = e.clientX - initialX;
                currentY = e.clientY - initialY;
                counter.style.left = `${currentX}px`;
                counter.style.top = `${currentY}px`;
            }
        }

        function dragEnd() {
            if (isDragging) {
                isDragging = false;
                // Save position when dragging ends
                GM_setValue('counterPosition', JSON.stringify({
                    left: counter.style.left,
                    top: counter.style.top
                }));
                document.onmousemove = null;
                document.onmouseup = null;
            }
        }
    }

    function addEventListeners() {
        document.getElementById('toggleButton').onclick = () => {
            const counter = document.getElementById('miniCounter');
            counter.classList.toggle('collapsed');
            document.getElementById('toggleButton').textContent =
                counter.classList.contains('collapsed') ? '▲' : '▼';
        };

        document.getElementById('resetBtn').onclick = () => {
            viewedCases.clear();
            GM_setValue('viewedCases', '[]');
            document.getElementById('caseCount').textContent = '0';
            resetTimer();
            // Clear search status when resetting
            document.getElementById('searchStatus').textContent = '';
        };
    }

    function startTimer(caseId) {
        if (timerInterval) {
            clearInterval(timerInterval);
        }

        if (timerState.caseId !== caseId) {
            timerState = {
                caseId: caseId,
                startTime: Date.now()
            };
            GM_setValue('timerState', JSON.stringify(timerState));
        }

        const timerDisplay = document.getElementById('timerDisplay');
        if (timerDisplay) {
            timerInterval = setInterval(() => {
                const elapsedSeconds = Math.floor((Date.now() - timerState.startTime) / 1000);
                timerDisplay.textContent = formatTime(elapsedSeconds);
            }, 1000);

            // Initial display
            const elapsedSeconds = Math.floor((Date.now() - timerState.startTime) / 1000);
            timerDisplay.textContent = formatTime(elapsedSeconds);
        }
    }
    function resetTimer() {
        if (timerInterval) {
            clearInterval(timerInterval);
        }
        document.getElementById('timerDisplay').textContent = '0:00:00';
        timerState = {caseId: null, startTime: null};
        GM_setValue('timerState', JSON.stringify(timerState));
    }

    function getCaseIdFromUrl() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('caseId');
    }

    function updateCounter() {
        const newCaseId = getCaseIdFromUrl();
        const searchStatus = document.getElementById('searchStatus');

        // Check if the current URL contains "search-by-task-id"
        if (window.location.href.includes('search-by-task-id')) {
            if (searchStatus) {
                searchStatus.textContent = '(Search-by-task-id: not counting)';
            }
            // Don't update counter or timer for task ID searches
            if (timerInterval) {
                clearInterval(timerInterval);
                document.getElementById('timerDisplay').textContent = '0:00:00';
            }
            return;
        } else {
            // Clear the status message when not in task-id search
            if (searchStatus) {
                searchStatus.textContent = '';
            }
        }

        if (newCaseId && newCaseId !== currentCaseId) {
            currentCaseId = newCaseId;

            if (!viewedCases.has(newCaseId)) {
                viewedCases.add(newCaseId);
                GM_setValue('viewedCases', JSON.stringify([...viewedCases]));
                document.getElementById('caseCount').textContent = viewedCases.size;
            }

            startTimer(newCaseId);
        }
    }

    function checkUrlChange() {
        let lastUrl = location.href;
        new MutationObserver(() => {
            const url = location.href;
            if (url !== lastUrl) {
                lastUrl = url;
                updateCounter();
            }
        }).observe(document, {subtree: true, childList: true});
    }

    // Initialize everything
    addStyles();
    createCounter();
    initializeColorPicker();
    updateCounter();
    checkUrlChange();

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        if (timerInterval) {
            clearInterval(timerInterval);
        }
    });
})();
