// ==UserScript==
// @name         Tracker
// @namespace    http://tampermonkey.net/
// @version      4.0
// @description  Compact case counter and timer for Paragon tool
// @author       joelcarb@amazon.com
// @match        https://paragon-na.amazon.com/hz/investigation*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function() {
    'use strict';

    let viewedCases = new Set(JSON.parse(GM_getValue('viewedCases', '[]')));
    let timerInterval;
    let currentCaseId = null;
    let timerState = JSON.parse(GM_getValue('timerState', '{"caseId": null, "startTime": null}'));

    const styles = `
        #miniCounter {
            position: fixed;
            top: 10px;
            left: 10px;
            z-index: 9999;
            background: #2C3E50;
            color: white;
            border-radius: 4px;
            font-family: Arial, sans-serif;
            font-size: 12px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            width: 130px;
            user-select: none;
        }
        #counterHeader {
            padding: 5px;
            background: rgba(0,0,0,0.2);
            cursor: move;
            border-radius: 4px 4px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #counterContent {
            padding: 5px;
        }
        .counter-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 3px 0;
        }
        .label {
            font-size: 11px;
            opacity: 0.8;
        }
        .value {
            font-weight: bold;
        }
        #toggleButton {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 0 2px;
        }
        #miniCounter.collapsed #counterContent {
            display: none;
        }
    `;

    function addStyles() {
        const styleSheet = document.createElement('style');
        styleSheet.textContent = styles;
        document.head.appendChild(styleSheet);
    }

    function formatTime(seconds) {
        const hrs = Math.floor(seconds / 3600);
        const mins = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `${hrs}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    function createCounter() {
        const counter = document.createElement('div');
        counter.id = 'miniCounter';
        counter.innerHTML = `
            <div id="counterHeader">
                <span>Case Tracker</span>
                <button id="toggleButton">▼</button>
            </div>
            <div id="counterContent">
                <div class="counter-row">
                    <span class="label">Time:</span>
                    <span id="timerDisplay" class="value">0:00:00</span>
                </div>
                <div class="counter-row">
                    <span class="label">Cases:</span>
                    <span id="caseCount" class="value">${viewedCases.size}</span>
                </div>
                <div class="counter-row">
                    <button id="resetBtn" style="width:100%; padding:2px; margin-top:3px;">Reset</button>
                </div>
            </div>
        `;

        document.body.appendChild(counter);
        makeDraggable();
        addEventListeners();
    }

    function makeDraggable() {
        const counter = document.getElementById('miniCounter');
        const header = document.getElementById('counterHeader');
        let isDragging = false;
        let currentX;
        let currentY;
        let initialX;
        let initialY;

        header.onmousedown = dragStart;

        function dragStart(e) {
            initialX = e.clientX - counter.offsetLeft;
            initialY = e.clientY - counter.offsetTop;
            isDragging = true;

            document.onmousemove = drag;
            document.onmouseup = dragEnd;
        }

        function drag(e) {
            if (isDragging) {
                e.preventDefault();
                currentX = e.clientX - initialX;
                currentY = e.clientY - initialY;
                counter.style.left = `${currentX}px`;
                counter.style.top = `${currentY}px`;
            }
        }

        function dragEnd() {
            isDragging = false;
            document.onmousemove = null;
            document.onmouseup = null;
        }
    }

    function addEventListeners() {
        document.getElementById('toggleButton').onclick = () => {
            const counter = document.getElementById('miniCounter');
            counter.classList.toggle('collapsed');
            document.getElementById('toggleButton').textContent =
                counter.classList.contains('collapsed') ? '▲' : '▼';
        };

        document.getElementById('resetBtn').onclick = () => {
            viewedCases.clear();
            GM_setValue('viewedCases', '[]');
            document.getElementById('caseCount').textContent = '0';
            resetTimer();
        };
    }

    // ... Rest of your existing timer and case tracking logic ...

    window.addEventListener('load', () => {
        addStyles();
        createCounter();
        // Initialize your existing tracking logic here
    });
})();
