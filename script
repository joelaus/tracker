// ==UserScript==
// @name         Paragon Case Tracker
// @namespace    http://tampermonkey.net/
// @version      3.1
// @description  Counts new case IDs and time spent per case in Paragon tool
// @author       joelcarb@amazon.com
// @match        https://paragon-na.amazon.com/hz/investigation*
// @grant        GM_setValue
// @grant        GM_getValue
// ==/UserScript==

(function() {
    'use strict';

    let viewedCases = new Set(JSON.parse(GM_getValue('viewedCases', '[]')));
    let timerInterval;
    let currentCaseIdForTimer = null;
    let timerState = JSON.parse(GM_getValue('timerState', '{"caseId": null, "startTime": null}'));
    let position = JSON.parse(GM_getValue('counterPosition', '{"top": "10px", "left": "10px"}'));
    let lastProcessedCaseId = null;

    // Add CSS styles
    function addGlobalStyles() {
        const styles = document.createElement('style');
        styles.textContent = `
            .counter-section {
                margin: 10px 0;
                padding: 8px 0;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
            }
            .section-title {
                font-size: 14px;
                margin-bottom: 5px;
                color: rgba(255, 255, 255, 0.9);
            }
            .section-value {
                font-size: 18px;
                font-weight: bold;
                text-align: center;
            }
            .case-info {
                font-size: 12px;
                color: rgba(255, 255, 255, 0.8);
            }
            .status-info {
                font-size: 10px;
                color: rgba(255, 255, 255, 0.6);
                margin-top: 3px;
            }
            .color-selector {
                display: flex;
                justify-content: space-between;
                gap: 5px;
                margin-top: 5px;
            }
            .color-btn {
                width: 25%;
                height: 20px;
                border: 1px solid rgba(255, 255, 255, 0.3);
                border-radius: 3px;
                cursor: pointer;
                transition: transform 0.2s;
            }
            .color-btn:hover {
                transform: scale(1.1);
            }
            #resetCounter {
                margin-top: 10px;
                padding: 8px;
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border: none;
                border-radius: 3px;
                cursor: pointer;
                width: 100%;
                font-size: 12px;
                transition: background 0.2s;
            }
            #resetCounter:hover {
                background: rgba(255, 255, 255, 0.2);
            }
            .counter-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 10px;
                border-radius: 5px 5px 0 0;
                cursor: move;
            }
            .toggle-button {
                background: none;
                border: none;
                color: white;
                cursor: pointer;
                font-size: 12px;
                padding: 0 5px;
                transition: transform 0.2s;
            }
            .toggle-button:hover {
                transform: scale(1.2);
            }
        `;
        document.head.appendChild(styles);
    }

    function getCaseIdFromUrl() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('caseId');
    }

    function isSearchByTaskId() {
        return window.location.href.includes('search-by-task-id');
    }

    function formatTime(seconds) {
        const hrs = Math.floor(seconds / 3600);
        const mins = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `${hrs.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    function adjustColor(color, amount) {
        return '#' + color.replace(/^#/, '').replace(/../g, color =>
            ('0' + Math.min(255, Math.max(0, parseInt(color, 16) + amount)).toString(16)).substr(-2)
        );
    }
    function startTimer(caseId, resetStartTime = false) {
        if (timerInterval) {
            clearInterval(timerInterval);
        }

        if (resetStartTime || timerState.caseId !== caseId) {
            timerState = {
                caseId: caseId,
                startTime: Date.now()
            };
            GM_setValue('timerState', JSON.stringify(timerState));
        }

        const timerDisplay = document.getElementById('timerDisplay');

        timerInterval = setInterval(() => {
            if (timerDisplay) {
                const elapsedSeconds = Math.floor((Date.now() - timerState.startTime) / 1000);
                timerDisplay.textContent = formatTime(elapsedSeconds);
            }
        }, 1000);

        if (timerDisplay) {
            const elapsedSeconds = Math.floor((Date.now() - timerState.startTime) / 1000);
            timerDisplay.textContent = formatTime(elapsedSeconds);
        }
    }

    function makeDraggable(element, handle) {
        let isDragging = false;
        let currentX;
        let currentY;
        let initialX;
        let initialY;

        function onDragStart(e) {
            initialX = e.clientX - element.offsetLeft;
            initialY = e.clientY - element.offsetTop;
            if (e.target === handle || handle.contains(e.target)) {
                isDragging = true;
            }
        }

        function onDrag(e) {
            if (!isDragging) return;

            e.preventDefault();
            currentX = e.clientX - initialX;
            currentY = e.clientY - initialY;

            currentX = Math.min(Math.max(0, currentX), window.innerWidth - element.offsetWidth);
            currentY = Math.min(Math.max(0, currentY), window.innerHeight - element.offsetHeight);

            element.style.left = currentX + 'px';
            element.style.top = currentY + 'px';

            GM_setValue('counterPosition', JSON.stringify({
                top: currentY + 'px',
                left: currentX + 'px'
            }));
        }

        function onDragEnd() {
            isDragging = false;
        }

        handle.addEventListener('mousedown', onDragStart);
        document.addEventListener('mousemove', onDrag);
        document.addEventListener('mouseup', onDragEnd);
    }

    function createCounter() {
        const counter = document.createElement('div');
        counter.id = 'caseCounter';

        const savedColor = GM_getValue('counterColor', '#333333');
        const isExpanded = GM_getValue('counterExpanded', true);

        counter.style.cssText = `
            position: fixed;
            top: ${position.top};
            left: ${position.left};
            background: ${savedColor};
            color: white;
            padding: 0;
            border-radius: 5px;
            z-index: 9999;
            font-family: Arial, sans-serif;
            font-size: 14px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            min-width: 200px;
            user-select: none;
            transition: all 0.3s ease;
        `;

        // Create header
        const header = document.createElement('div');
        header.className = 'counter-header';
        header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 10px;
            background: ${adjustColor(savedColor, -20)};
            border-radius: 5px 5px 0 0;
            cursor: move;
        `;

        const title = document.createElement('div');
        title.textContent = 'Case Counter';
        title.style.fontWeight = 'bold';

        const toggleButton = document.createElement('button');
        toggleButton.className = 'toggle-button';
        toggleButton.innerHTML = isExpanded ? '▼' : '▲';
        toggleButton.style.cssText = `
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 12px;
            padding: 0 5px;
            transition: transform 0.2s;
        `;

        // Create main content container
        const mainContent = document.createElement('div');
        mainContent.id = 'counterContent';
        mainContent.style.cssText = `
            padding: 10px;
            display: ${isExpanded ? 'block' : 'none'};
            transition: all 0.3s ease;
        `;
        mainContent.innerHTML = `
            <div class="counter-section">
                <div class="section-title">Time in Current Case:</div>
                <div id="timerDisplay" class="section-value">00:00:00</div>
            </div>
            <div class="counter-section">
                <div class="section-title">Unique Cases Viewed:</div>
                <div id="counterDisplay" class="section-value">${viewedCases.size}</div>
            </div>
            <div class="counter-section">
                <div id="currentCase" class="case-info">Current Case: ${getCaseIdFromUrl() || 'None'}</div>
                <div id="searchStatus" class="status-info"></div>
            </div>
            <div class="counter-section">
                <div class="section-title">Counter Color:</div>
                <div class="color-selector">
                    <button class="color-btn" data-color="#333333" style="background: #333333"></button>
                    <button class="color-btn" data-color="#1a75ff" style="background: #1a75ff"></button>
                    <button class="color-btn" data-color="#2eb82e" style="background: #2eb82e"></button>
                    <button class="color-btn" data-color="#ff471a" style="background: #ff471a"></button>
                </div>
            </div>
        `;

        // Add toggle functionality
        toggleButton.addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent drag when clicking toggle
            const isCurrentlyExpanded = mainContent.style.display === 'block';
            mainContent.style.display = isCurrentlyExpanded ? 'none' : 'block';
            toggleButton.innerHTML = isCurrentlyExpanded ? '▲' : '▼';
            GM_setValue('counterExpanded', !isCurrentlyExpanded);
        });

        // Assemble header
        header.appendChild(title);
        header.appendChild(toggleButton);

        // Create reset button
        const resetButton = document.createElement('button');
        resetButton.id = 'resetCounter';
        resetButton.textContent = 'Reset Counter';

        resetButton.addEventListener('click', function() {
            viewedCases.clear();
            lastProcessedCaseId = null;
            GM_setValue('viewedCases', '[]');
            document.getElementById('counterDisplay').textContent = '0';
            const currentCaseId = getCaseIdFromUrl();
            if (currentCaseId && !isSearchByTaskId()) {
                viewedCases.add(currentCaseId);
                GM_setValue('viewedCases', JSON.stringify([...viewedCases]));
                document.getElementById('counterDisplay').textContent = '1';
                currentCaseIdForTimer = currentCaseId;
                lastProcessedCaseId = currentCaseId;
                startTimer(currentCaseId, true);
            }
        });

        counter.appendChild(header);
        counter.appendChild(mainContent);
        mainContent.appendChild(resetButton);
        document.body.appendChild(counter);

        counter.querySelectorAll('.color-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const newColor = this.getAttribute('data-color');
                counter.style.background = newColor;
                header.style.background = adjustColor(newColor, -20);
                GM_setValue('counterColor', newColor);
            });
        });

        makeDraggable(counter, header);

        const initialCaseId = getCaseIdFromUrl();
        if (initialCaseId && !isSearchByTaskId()) {
            if (!viewedCases.has(initialCaseId)) {
                viewedCases.add(initialCaseId);
                GM_setValue('viewedCases', JSON.stringify([...viewedCases]));
                document.getElementById('counterDisplay').textContent = viewedCases.size;
            }
            currentCaseIdForTimer = initialCaseId;
            lastProcessedCaseId = initialCaseId;
            if (timerState.caseId === initialCaseId) {
                startTimer(initialCaseId, false);
            } else {
                startTimer(initialCaseId, true);
            }
        }
    }

    function updateCounter() {
        const currentCaseId = getCaseIdFromUrl();
        const searchStatus = document.getElementById('searchStatus');

        if (isSearchByTaskId()) {
            if (searchStatus) {
                searchStatus.textContent = '(Search-by-task-id: not counting)';
            }
            if (timerInterval) {
                clearInterval(timerInterval);
                document.getElementById('timerDisplay').textContent = '00:00:00';
            }
            return;
        } else {
            if (searchStatus) {
                searchStatus.textContent = '';
            }
        }

        if (currentCaseId && currentCaseId !== lastProcessedCaseId) {
            if (!viewedCases.has(currentCaseId)) {
                viewedCases.add(currentCaseId);
                GM_setValue('viewedCases', JSON.stringify([...viewedCases]));
                const counterDisplay = document.getElementById('counterDisplay');
                if (counterDisplay) {
                    counterDisplay.textContent = viewedCases.size;
                }
            }

            currentCaseIdForTimer = currentCaseId;
            lastProcessedCaseId = currentCaseId;
            startTimer(currentCaseId, true);
        }

        const currentCaseDisplay = document.getElementById('currentCase');
        if (currentCaseDisplay) {
            currentCaseDisplay.textContent = `Current Case: ${currentCaseId || 'None'}`;
        }
    }

    function checkUrlChange() {
        let lastUrl = location.href;
        new MutationObserver(() => {
            const url = location.href;
            if (url !== lastUrl) {
                lastUrl = url;
                updateCounter();
            }
        }).observe(document, {subtree: true, childList: true});
    }

    window.addEventListener('beforeunload', () => {
        if (timerInterval) {
            clearInterval(timerInterval);
        }
    });

    window.addEventListener('load', () => {
        addGlobalStyles();
        createCounter();
        updateCounter();
        checkUrlChange();
    });
})();
